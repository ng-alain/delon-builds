{"version":3,"file":"noticeIcon.js.map","sources":["ng://@delon/abc/notice-icon/notice-icon-tab.component.ts","ng://@delon/abc/notice-icon/notice-icon.component.ts","ng://@delon/abc/notice-icon/notice-icon.module.ts"],"sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { NoticeItem, NoticeIconSelect } from './notice-icon.types';\n\n@Component({\n  selector: 'notice-icon-tab',\n  template: `\n  <div *ngIf=\"data.list?.length === 0; else listTpl\" class=\"notice-icon__notfound\">\n    <img class=\"notice-icon__notfound-img\" *ngIf=\"data.emptyImage\" src=\"{{data.emptyImage}}\" alt=\"not found\" />\n    <p>{{data.emptyText || locale.emptyText}}</p>\n  </div>\n  <ng-template #listTpl>\n    <nz-list [nzDataSource]=\"data.list\" [nzRenderItem]=\"item\">\n      <ng-template #item let-item>\n        <nz-list-item (click)=\"onClick(item)\" [ngClass]=\"{'notice-icon__item-read': item.read}\">\n          <nz-list-item-meta\n            [nzTitle]=\"nzTitle\"\n            [nzDescription]=\"nzDescription\"\n            [nzAvatar]=\"item.avatar\">\n            <ng-template #nzTitle>\n              {{item.title}}\n              <div class=\"notice-icon__item-extra\" *ngIf=\"item.extra\"><nz-tag [nzColor]=\"item.color\">{{item.extra}}</nz-tag></div>\n            </ng-template>\n            <ng-template #nzDescription>\n              <div *ngIf=\"item.description\" class=\"notice-icon__item-desc\">{{item.description}}</div>\n              <div *ngIf=\"item.datetime\" class=\"notice-icon__item-time\">{{item.datetime}}</div>\n            </ng-template>\n          </nz-list-item-meta>\n        </nz-list-item>\n      </ng-template>\n    </nz-list>\n    <div class=\"notice-icon__clear\" (click)=\"onClear()\">{{ data.clearText || locale.clearText }}</div>\n  </ng-template>\n  `,\n  preserveWhitespaces: false,\n})\nexport class NoticeIconTabComponent {\n  @Input()\n  locale: any = {};\n  @Input()\n  data: NoticeItem;\n  @Output()\n  select = new EventEmitter<NoticeIconSelect>();\n  @Output()\n  clear = new EventEmitter<string>();\n\n  onClick(item: NoticeItem) {\n    this.select.emit(<NoticeIconSelect>{\n      title: this.data.title,\n      item,\n    });\n  }\n\n  onClear() {\n    this.clear.emit(this.data.title);\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnDestroy,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DelonLocaleService } from '@delon/theme';\nimport { InputNumber, InputBoolean } from '@delon/util';\n\nimport { NoticeItem, NoticeIconSelect } from './notice-icon.types';\n\n@Component({\n  selector: 'notice-icon',\n  template: `\n  <nz-badge *ngIf=\"data?.length === 0\" [nzCount]=\"count\">\n    <i nz-icon type=\"bell\"></i>\n  </nz-badge>\n  <nz-popover *ngIf=\"data?.length > 0\"\n    [nzVisible]=\"popoverVisible\" (nzVisibleChange)=\"onVisibleChange($event)\" nzTrigger=\"click\"\n    nzPlacement=\"bottomRight\"\n    nzOverlayClassName=\"notice-icon\">\n    <div nz-popover class=\"alain-default__nav-item notice-icon__item\">\n      <nz-badge [nzCount]=\"count\">\n        <i nz-icon type=\"bell\" class=\"alain-default__nav-item-icon\"></i>\n      </nz-badge>\n    </div>\n    <ng-template #nzTemplate>\n      <nz-spin [nzSpinning]=\"loading\" [nzDelay]=\"0\">\n        <nz-tabset>\n          <nz-tab *ngFor=\"let i of data\" [nzTitle]=\"i.title\">\n            <notice-icon-tab\n              [locale]=\"locale\"\n              [data]=\"i\"\n              (select)=\"onSelect($event)\"\n              (clear)=\"onClear($event)\"></notice-icon-tab>\n          </nz-tab>\n        </nz-tabset>\n      </nz-spin>\n    </ng-template>\n  </nz-popover>\n  `,\n  host: { '[class.notice-icon__btn]': 'true' },\n  preserveWhitespaces: false,\n})\nexport class NoticeIconComponent implements OnDestroy {\n  private i18n$: Subscription;\n  locale: any = {};\n\n  @Input()\n  data: NoticeItem[] = [];\n\n  /** å¾æ ä¸çæ¶æ¯æ»æ° */\n  @Input()\n  @InputNumber()\n  count: number;\n\n  /** å¼¹åºå¡çå è½½ç¶æ */\n  @Input()\n  @InputBoolean()\n  loading = false;\n\n  @Output()\n  select = new EventEmitter<NoticeIconSelect>();\n  @Output()\n  clear = new EventEmitter<string>();\n\n  /** æå¨æ§å¶Popoveræ¾ç¤º */\n  @Input()\n  @InputBoolean()\n  popoverVisible = false;\n\n  @Output()\n  popoverVisibleChange = new EventEmitter<boolean>();\n\n  constructor(private i18n: DelonLocaleService) {\n    this.i18n$ = this.i18n.change.subscribe(\n      () => (this.locale = this.i18n.getData('noticeIcon')),\n    );\n  }\n\n  onVisibleChange(result: boolean) {\n    this.popoverVisibleChange.emit(result);\n  }\n\n  onSelect(i: any) {\n    this.select.emit(i);\n  }\n\n  onClear(title: string) {\n    this.clear.emit(title);\n  }\n\n  ngOnDestroy() {\n    this.i18n$.unsubscribe();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgZorroAntdModule } from 'ng-zorro-antd';\nimport { DelonLocaleModule } from '@delon/theme';\n\nimport { NoticeIconComponent } from './notice-icon.component';\nimport { NoticeIconTabComponent } from './notice-icon-tab.component';\n\nconst COMPONENTS = [NoticeIconComponent];\n\n@NgModule({\n  imports: [CommonModule, DelonLocaleModule, NgZorroAntdModule],\n  declarations: [...COMPONENTS, NoticeIconTabComponent],\n  exports: [...COMPONENTS],\n})\nexport class NoticeIconModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: NoticeIconModule, providers: [] };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;;sBAqCgB,EAAE;sBAIP,IAAI,YAAY,EAAoB;qBAErC,IAAI,YAAY,EAAU;;;;;;IAElC,OAAO,CAAC,IAAgB;QACtB,IAAI,CAAC,MAAM,CAAC,IAAI,mBAAmB;YACjC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;YACtB,IAAI;SACL,EAAC,CAAC;KACJ;;;;IAED,OAAO;QACL,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAClC;;;YAnDF,SAAS,SAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BT;gBACD,mBAAmB,EAAE,KAAK;aAC3B;;;qBAEE,KAAK;mBAEL,KAAK;qBAEL,MAAM;oBAEN,MAAM;;;;;;;;;;;ICkCP,YAAoB,IAAwB;QAAxB,SAAI,GAAJ,IAAI,CAAoB;sBA5B9B,EAAE;oBAGK,EAAE;;;;uBAUb,KAAK;sBAGN,IAAI,YAAY,EAAoB;qBAErC,IAAI,YAAY,EAAU;;;;8BAKjB,KAAK;oCAGC,IAAI,YAAY,EAAW;QAGhD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CACrC,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CACtD,CAAC;KACH;;;;;IAED,eAAe,CAAC,MAAe;QAC7B,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACxC;;;;;IAED,QAAQ,CAAC,CAAM;QACb,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACrB;;;;;IAED,OAAO,CAAC,KAAa;QACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACxB;;;;IAED,WAAW;QACT,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;KAC1B;;;YAnFF,SAAS,SAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BT;gBACD,IAAI,EAAE,EAAE,0BAA0B,EAAE,MAAM,EAAE;gBAC5C,mBAAmB,EAAE,KAAK;aAC3B;;;;YArCQ,kBAAkB;;;mBA0CxB,KAAK;oBAIL,KAAK;sBAKL,KAAK;qBAIL,MAAM;oBAEN,MAAM;6BAIN,KAAK;mCAIL,MAAM;;;IAlBN,WAAW,EAAE;;;;IAKb,YAAY,EAAE;;;;IAUd,YAAY,EAAE;;;;;;;;ACtEjB;AAQA,MAAM,UAAU,GAAG,CAAC,mBAAmB,CAAC,CAAC;AAOzC;;;;IACE,OAAO,OAAO;QACZ,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC;KACtD;;;YARF,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,EAAE,iBAAiB,EAAE,iBAAiB,CAAC;gBAC7D,YAAY,EAAE,CAAC,GAAG,UAAU,EAAE,sBAAsB,CAAC;gBACrD,OAAO,EAAE,CAAC,GAAG,UAAU,CAAC;aACzB;;;;;;;;;;;;;;;"}
