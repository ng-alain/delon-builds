{"version":3,"file":"zip.js","sources":["ng://@delon/abc/zip/zip.types.ts","ng://@delon/abc/zip/zip.config.ts","ng://@delon/abc/zip/zip.service.ts","ng://@delon/abc/zip/zip.module.ts"],"sourcesContent":["export interface ZipWriteOptions {\n  /** save file name, default: `download.zip` */\n  filename?: string;\n  options?: any;\n  /** The optional function called on each internal update with the metadata. */\n  update?: (metadata: any) => void;\n  /** triggers when saveas */\n  callback?: () => void;\n}\n\nexport interface ZipSaveOptions {\n  /**\n   * æå®ä¿å­æä»¶åï¼é»è®¤ `download.zip`\n   */\n  filename?: string;\n  /**\n   * JSZip `generateAsync` æ¹æ³ç `options` éé¡¹\n   * @see https://stuk.github.io/jszip/documentation/api_jszip/generate_async.html\n   */\n  options?: any;\n  /**\n   * JSZip `generateAsync` æ¹æ³ç `onUpdate` åè°\n   * @see https://stuk.github.io/jszip/documentation/api_jszip/generate_async.html\n   */\n  update?: (percent: number, currentFile: string) => void;\n  /**\n   * ä¿å­ååè°æ¹æ³\n   */\n  callback?: (blob: Blob) => void;\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ZipConfig {\n  /**\n   * Zip library path\n   */\n  url?: string = '//cdn.bootcss.com/jszip/3.1.5/jszip.min.js';\n  /**\n   * Defines which zip optional utils should get loaded\n   */\n  utils?: string[] = [];\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { LazyResult, LazyService } from '@delon/util';\nimport { saveAs } from 'file-saver';\n\nimport { ZipConfig } from './zip.config';\nimport { ZipSaveOptions } from './zip.types';\n\ndeclare var JSZip: any;\n\n@Injectable({ providedIn: 'root' })\nexport class ZipService {\n  constructor(private cog: ZipConfig, private http: HttpClient, private lazy: LazyService) {}\n\n  private init(): Promise<LazyResult[]> {\n    return this.lazy.load([this.cog.url!].concat(this.cog.utils!));\n  }\n\n  private check(zip: any) {\n    if (!zip) throw new Error('get instance via `ZipService.create()`');\n  }\n\n  /** è§£å */\n  read(fileOrUrl: File | string, options?: any): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      this.init().then(() => {\n        // from url\n        if (typeof fileOrUrl === 'string') {\n          this.http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe(\n            (res: ArrayBuffer) => {\n              JSZip.loadAsync(res, options).then(ret => resolve(ret));\n            },\n            (err: any) => {\n              reject(err);\n            },\n          );\n          return;\n        }\n        // from file\n        const reader: FileReader = new FileReader();\n        reader.onload = (e: any) => {\n          JSZip.loadAsync(e.target.result, options).then(ret => resolve(ret));\n        };\n        reader.readAsBinaryString(fileOrUrl as File);\n      });\n    });\n  }\n\n  /** åå»º Zip å®ä¾ï¼ç¨äºåå»ºåç¼©æä»¶ */\n  create(): Promise<any> {\n    return new Promise<any>(resolve => {\n      this.init().then(() => {\n        const zipFile: any = new JSZip();\n        resolve(zipFile);\n      });\n    });\n  }\n\n  /**\n   * ä¸è½½URLèµæºå¹¶åå¥ zip\n   * @param zip Zip å®ä¾\n   * @param path Zip è·¯å¾ï¼ä¾å¦ï¼ `text.txt`ã`txt/hi.txt`\n   * @param url URL å°å\n   */\n  pushUrl(zip: any, path: string, url: string): Promise<void> {\n    this.check(zip);\n    return new Promise<void>((resolve, reject) => {\n      this.http.request('GET', url, { responseType: 'arraybuffer' }).subscribe(\n        (res: ArrayBuffer) => {\n          zip.file(path, res);\n          resolve();\n        },\n        (error: any) => {\n          reject({ url, error });\n        },\n      );\n    });\n  }\n\n  /**\n   * ä¿å­Zipå¹¶æ§è¡æå¼ä¿å­å¯¹è¯æ¡\n   *\n   * @param zip zip å¯¹è±¡ï¼å¡å¿éè¿ `create()` æå»º\n   * @param options é¢å¤åæ°ï¼\n   */\n  save(zip: any, options?: ZipSaveOptions): Promise<void> {\n    this.check(zip);\n    const opt = { ...options } as ZipSaveOptions;\n    return new Promise<void>((resolve, reject) => {\n      zip.generateAsync({ type: 'blob', ...opt.options }, opt.update).then(\n        (data: Blob) => {\n          if (opt.callback) opt.callback(data);\n          saveAs(data, opt.filename || 'download.zip');\n          resolve();\n        },\n        err => {\n          reject(err);\n        },\n      );\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DelonUtilModule } from '@delon/util';\n\n@NgModule({\n  imports: [CommonModule, DelonUtilModule],\n})\nexport class ZipModule {}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,8BAQC;;;;;;IANC,mCAAkB;;IAClB,kCAAc;;;;;IAEd,iCAAiC;;;;;IAEjC,mCAAsB;;;;;AAGxB,6BAmBC;;;;;;IAfC,kCAAkB;;;;;;IAKlB,iCAAc;;;;;;IAKd,gCAAwD;;;;;IAIxD,kCAAgC;;;;;;;;AC5BlC,MAGa,SAAS;IADtB;;;;QAKE,QAAG,GAAY,4CAA4C,CAAC;;;;QAI5D,UAAK,GAAc,EAAE,CAAC;KACvB;;;YAVA,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;;;;;IAKhC,wBAA4D;;;;;IAI5D,0BAAsB;;;;;;;;ACXxB,MAWa,UAAU;;;;;;IACrB,YAAoB,GAAc,EAAU,IAAgB,EAAU,IAAiB;QAAnE,QAAG,GAAH,GAAG,CAAW;QAAU,SAAI,GAAJ,IAAI,CAAY;QAAU,SAAI,GAAJ,IAAI,CAAa;KAAI;;;;;IAEnF,IAAI;QACV,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAE,CAAC,MAAM,oBAAC,IAAI,CAAC,GAAG,CAAC,KAAK,GAAE,CAAC,CAAC;KAChE;;;;;;IAEO,KAAK,CAAC,GAAQ;QACpB,IAAI,CAAC,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;KACrE;;;;;;;IAGD,IAAI,CAAC,SAAwB,EAAE,OAAa;QAC1C,OAAO,IAAI,OAAO;;;;;QAAM,CAAC,OAAO,EAAE,MAAM;YACtC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI;;;YAAC;;gBAEf,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;oBACjC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,YAAY,EAAE,aAAa,EAAE,CAAC,CAAC,SAAS;;;;oBAC5E,CAAC,GAAgB;wBACf,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,IAAI;;;;wBAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,EAAC,CAAC;qBACzD;;;;oBACD,CAAC,GAAQ;wBACP,MAAM,CAAC,GAAG,CAAC,CAAC;qBACb,EACF,CAAC;oBACF,OAAO;iBACR;;;sBAEK,MAAM,GAAe,IAAI,UAAU,EAAE;gBAC3C,MAAM,CAAC,MAAM;;;;gBAAG,CAAC,CAAM;oBACrB,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI;;;;oBAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,EAAC,CAAC;iBACrE,CAAA,CAAC;gBACF,MAAM,CAAC,kBAAkB,oBAAC,SAAS,GAAS,CAAC;aAC9C,EAAC,CAAC;SACJ,EAAC,CAAC;KACJ;;;;;IAGD,MAAM;QACJ,OAAO,IAAI,OAAO;;;;QAAM,OAAO;YAC7B,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI;;;YAAC;;sBACT,OAAO,GAAQ,IAAI,KAAK,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,CAAC;aAClB,EAAC,CAAC;SACJ,EAAC,CAAC;KACJ;;;;;;;;IAQD,OAAO,CAAC,GAAQ,EAAE,IAAY,EAAE,GAAW;QACzC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChB,OAAO,IAAI,OAAO;;;;;QAAO,CAAC,OAAO,EAAE,MAAM;YACvC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,YAAY,EAAE,aAAa,EAAE,CAAC,CAAC,SAAS;;;;YACtE,CAAC,GAAgB;gBACf,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;gBACpB,OAAO,EAAE,CAAC;aACX;;;;YACD,CAAC,KAAU;gBACT,MAAM,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;aACxB,EACF,CAAC;SACH,EAAC,CAAC;KACJ;;;;;;;;IAQD,IAAI,CAAC,GAAQ,EAAE,OAAwB;QACrC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;cACV,GAAG,wCAAQ,OAAO,GAAoB;QAC5C,OAAO,IAAI,OAAO;;;;;QAAO,CAAC,OAAO,EAAE,MAAM;YACvC,GAAG,CAAC,aAAa,iBAAG,IAAI,EAAE,MAAM,IAAK,GAAG,CAAC,OAAO,GAAI,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI;;;;YAClE,CAAC,IAAU;gBACT,IAAI,GAAG,CAAC,QAAQ;oBAAE,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACrC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,QAAQ,IAAI,cAAc,CAAC,CAAC;gBAC7C,OAAO,EAAE,CAAC;aACX;;;;YACD,GAAG;gBACD,MAAM,CAAC,GAAG,CAAC,CAAC;aACb,EACF,CAAC;SACH,EAAC,CAAC;KACJ;;;YA1FF,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;YALzB,SAAS;YALT,UAAU;YAEE,WAAW;;;;;;;;IAUlB,yBAAsB;;;;;IAAE,0BAAwB;;;;;IAAE,0BAAyB;;;;;;;;ACZzF,MAOa,SAAS;;;YAHrB,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,EAAE,eAAe,CAAC;aACzC;;;;;;;;;;;;;;;;;"}