{"version":3,"sources":["ng://@delon/mock/src/status.error.ts","ng://@delon/mock/src/mock.config.ts","ng://@delon/mock/src/mock.service.ts","ng://@delon/mock/src/mock.interceptor.ts","ng://@delon/mock/src/mock.module.ts"],"names":["MockStatusError","status","error","this","DelonMockConfig","MockService","config","applyMock","data","prototype","cached","realApplyMock","e","outputError","Object","keys","forEach","key","rules","ruleKey","value","Error","rule","_this","genRule","indexOf","method","item","find","w","url","callback","push","sort","a","b","martcher","toString","length","splited","split","toLowerCase","segments","filter","segment","startsWith","map","v","substring","reStr","join","RegExp","test","toUpperCase","filePath","message","errors","stack","line","trim","replace","splice","console","group","warn","log","groupEnd","getRule","params","list","ret","exec","slice","index","clearCache","defineProperty","ngOnDestroy","Injectable","MockInterceptor","injector","intercept","req","next","res","src","get","assign","delay","force","handle","mockRequest_1","original","body","queryString","headers","urlParams","itemArr","call","errRes_1","HttpErrorResponse","statusText","Observable","observer","response","HttpResponse","of","pipe","Injector","DelonMockModule","forRoot","ngModule","providers","provide","useValue","HTTP_INTERCEPTORS","useClass","multi","forChild","NgModule","args"],"mappings":"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","sourcesContent":["export class MockStatusError {\n  statusText: string;\n  constructor(public status: number, public error?: any) {}\n}\n","export class DelonMockConfig {\n  /** è§åå®ä¹æ°æ® */\n  data: any;\n  /** è¯·æ±å»¶è¿ï¼åä½ï¼æ¯«ç§ï¼é»è®¤ï¼`300` */\n  delay? = 300;\n  /** æ¯å¦å¼ºå¶ææè¯·æ±é½Mockï¼`true` è¡¨ç¤ºå½è¯·æ±çURLä¸å­å¨æ¶ç´æ¥è¿å 404 éè¯¯ï¼`false` è¡¨ç¤ºæªå½ä¸­æ¶åéçå®HTTPè¯·æ± */\n  force? = false;\n  /** æ¯å¦æå° Mock è¯·æ±ä¿¡æ¯ï¼å¼¥è¡¥æµè§å¨æ Networkä¿¡æ¯ */\n  log? = true;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { DelonMockConfig } from './mock.config';\nimport { MockCachedRule, MockRule } from './interface';\n\n@Injectable()\nexport class MockService implements OnDestroy {\n  private cached: MockCachedRule[] = [];\n\n  constructor(private config: DelonMockConfig) {\n    this.applyMock();\n    delete this.config.data;\n  }\n\n  // region: parse rule\n\n  private applyMock() {\n    this.cached = [];\n    try {\n      this.realApplyMock();\n    } catch (e) {\n      this.outputError(e);\n    }\n  }\n\n  private realApplyMock() {\n    const data = this.config.data;\n    if (!data) return;\n    Object.keys(data).forEach((key: string) => {\n      const rules = data[key];\n      if (!rules) return;\n      Object.keys(rules).forEach((ruleKey: string) => {\n        const value = rules[ruleKey];\n        if (\n          !(\n            typeof value === 'function' ||\n            typeof value === 'object' ||\n            typeof value === 'string'\n          )\n        ) {\n          throw Error(\n            `mock value of [${key}-${ruleKey}] should be function or object or string, but got ${typeof value}`,\n          );\n        }\n        const rule = this.genRule(ruleKey, value);\n        if (\n          ['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH', 'OPTIONS'].indexOf(\n            rule.method,\n          ) === -1\n        ) {\n          throw Error(`method of ${key}-${ruleKey} is not valid`);\n        }\n        const item = this.cached.find(\n          w => w.url === rule.url && w.method === rule.method,\n        );\n        if (item) {\n          item.callback = rule.callback;\n        } else {\n          this.cached.push(rule);\n        }\n      });\n    });\n    // regular ordering\n    this.cached.sort(\n      (a, b) =>\n        (b.martcher || '').toString().length -\n        (a.martcher || '').toString().length,\n    );\n  }\n\n  private genRule(key: string, callback: any): MockCachedRule {\n    let method = 'GET';\n    let url = key;\n\n    if (key.indexOf(' ') > -1) {\n      const splited = key.split(' ');\n      method = splited[0].toLowerCase();\n      url = splited[1];\n    }\n\n    let martcher: RegExp = null;\n    let segments: string[] = [];\n    if (~url.indexOf(':')) {\n      segments = url!\n        .split('/')\n        .filter(segment => segment.startsWith(':'))\n        .map(v => v.substring(1));\n      const reStr = url!\n        .split('/')\n        .map(segment => (segment.startsWith(':') ? `([^/]+)` : segment))\n        .join('/');\n      martcher = new RegExp(reStr, 'i');\n    } else if (/(\\([^)]+\\))/i.test(url)) {\n      martcher = new RegExp(url, 'i');\n    }\n\n    return {\n      url,\n      martcher,\n      segments,\n      callback,\n      method: method.toUpperCase(),\n    };\n  }\n\n  private outputError(error: any) {\n    const filePath = error.message.split(': ')[0];\n    const errors = error.stack\n      .split('\\n')\n      .filter(line => line.trim().indexOf('at ') !== 0)\n      .map(line => line.replace(`${filePath}: `, ''));\n    errors.splice(1, 0, ['']);\n\n    console.group();\n    console.warn(`==========Failed to parse mock config.==========`);\n    console.log(errors.join('\\n'));\n    console.groupEnd();\n\n    throw error;\n  }\n\n  // endregion\n\n  getRule(method: string, url: string): MockRule {\n    method = (method || 'GET').toUpperCase();\n    const params: any = {};\n    const list =\n      this.cached.filter(\n        w =>\n          w.method === method &&\n          (w.martcher ? w.martcher.test(url) : w.url === url),\n      );\n    if (list.length === 0) return null;\n    const ret = list.find(w => w.url === url) || list[0];\n    if (ret.martcher) {\n      const execArr = ret.martcher.exec(url);\n      execArr.slice(1).map((value: string, index: number) => {\n        params[ret.segments[index]] = value;\n      });\n    }\n    return {\n      url,\n      method: ret.method,\n      params,\n      callback: ret.callback,\n    };\n  }\n\n  clearCache() {\n    this.cached = [];\n  }\n\n  get rules() {\n    return this.cached;\n  }\n\n  ngOnDestroy(): void {\n    this.clearCache();\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpSentEvent,\n  HttpHeaderResponse,\n  HttpProgressEvent,\n  HttpResponse,\n  HttpUserEvent,\n  HttpErrorResponse,\n  HttpEvent,\n} from '@angular/common/http';\nimport { Observable, Observer, of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport { DelonMockConfig } from './mock.config';\nimport { MockService } from './mock.service';\nimport { MockStatusError } from './status.error';\nimport { MockRequest } from './interface';\n\n@Injectable()\nexport class MockInterceptor implements HttpInterceptor {\n  constructor(private injector: Injector) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler,\n  ): Observable<\n    | HttpSentEvent\n    | HttpHeaderResponse\n    | HttpProgressEvent\n    | HttpResponse<any>\n    | HttpUserEvent<any>\n  > {\n    const src = this.injector.get(MockService);\n    const config = Object.assign(\n      {\n        delay: 300,\n        force: false,\n        log: true,\n      },\n      this.injector.get(DelonMockConfig, null),\n    );\n    const rule = src.getRule(req.method, req.url.split('?')[0]);\n    if (!rule && !config.force) {\n      return next.handle(req);\n    }\n\n    let res: any;\n    switch (typeof rule.callback) {\n      case 'function':\n        const mockRequest: MockRequest = {\n          original: req,\n          body: req.body,\n          queryString: {},\n          headers: {},\n          params: rule.params,\n        };\n        const urlParams = req.url.split('?');\n        if (urlParams.length > 1) {\n          urlParams[1].split('&').forEach(item => {\n            const itemArr = item.split('=');\n            mockRequest.queryString[itemArr[0]] = itemArr[1];\n          });\n        }\n        req.params\n          .keys()\n          .forEach(key => (mockRequest.queryString[key] = req.params.get(key)));\n        req.headers\n          .keys()\n          .forEach(key => (mockRequest.headers[key] = req.headers.get(key)));\n\n        try {\n          res = rule.callback.call(this, mockRequest);\n        } catch (e) {\n          let errRes: HttpErrorResponse;\n          if (e instanceof MockStatusError) {\n            errRes = new HttpErrorResponse({\n              url: req.url,\n              headers: req.headers,\n              status: e.status,\n              statusText: e.statusText || 'Unknown Error',\n              error: e.error,\n            });\n            if (config.log)\n              console.log(\n                `%c ð½MOCK ${e.status} STATUS `,\n                'background:#000;color:#bada55',\n                req.url,\n                errRes,\n                req,\n              );\n          } else {\n            console.error(\n              `Please use MockStatusError to throw status error`,\n              e,\n              req,\n            );\n          }\n          return new Observable((observer: Observer<HttpEvent<any>>) => {\n            observer.error(errRes);\n          });\n        }\n        break;\n      default:\n        res = rule.callback;\n        break;\n    }\n\n    const response: HttpResponse<any> = new HttpResponse({\n      status: 200,\n      body: res,\n      url: req.url,\n    });\n    if (config.log)\n      console.log(\n        '%c ð½MOCK ',\n        'background:#000;color:#bada55',\n        req.url,\n        response,\n        req,\n      );\n    return of(response).pipe(delay(config.delay));\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { DelonMockConfig } from './mock.config';\nimport { MockService } from './mock.service';\nimport { MockInterceptor } from './mock.interceptor';\n\n@NgModule({})\nexport class DelonMockModule {\n  static forRoot(config: DelonMockConfig): ModuleWithProviders {\n    return {\n      ngModule: DelonMockModule,\n      providers: [\n        MockService,\n        { provide: DelonMockConfig, useValue: config },\n        { provide: HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true },\n      ],\n    };\n  }\n\n  static forChild(): ModuleWithProviders {\n    return {\n      ngModule: DelonMockModule,\n      providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true },\n      ],\n    };\n  }\n}\n"]}