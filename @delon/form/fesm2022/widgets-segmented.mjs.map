{"version":3,"file":"widgets-segmented.mjs","sources":["../../../../packages/form/widgets/segmented/widget.ts","../../../../packages/form/widgets/segmented/module.ts","../../../../packages/form/widgets/segmented/index.ts","../../../../packages/form/widgets/segmented/widgets-segmented.ts"],"sourcesContent":["import { Component, ViewEncapsulation } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { ControlUIWidget, DelonFormModule, SFValue, getData } from '@delon/form';\nimport { NzSegmentedComponent, NzSegmentedOptions } from 'ng-zorro-antd/segmented';\n\nimport type { SFSegmentedWidgetSchema } from './schema';\n\n@Component({\n  selector: 'sf-segmented',\n  template: `<sf-item-wrap\n    [id]=\"id\"\n    [schema]=\"schema\"\n    [ui]=\"ui\"\n    [showError]=\"showError\"\n    [error]=\"error\"\n    [showTitle]=\"schema.title\"\n  >\n    <nz-segmented\n      [ngModel]=\"value\"\n      (ngModelChange)=\"setValue($event)\"\n      [nzDisabled]=\"disabled\"\n      [nzSize]=\"$any(ui.size)\"\n      [nzBlock]=\"ui.block ?? false\"\n      [nzOptions]=\"list\"\n      (nzValueChange)=\"valueChange($event)\"\n    />\n  </sf-item-wrap>`,\n  encapsulation: ViewEncapsulation.None,\n  imports: [FormsModule, DelonFormModule, NzSegmentedComponent]\n})\nexport class SegmentedWidget extends ControlUIWidget<SFSegmentedWidgetSchema> {\n  static readonly KEY = 'segmented';\n  private _list?: NzSegmentedOptions;\n  get list(): NzSegmentedOptions {\n    return this._list ?? [];\n  }\n\n  reset(value: SFValue): void {\n    getData(this.schema, this.ui, value).subscribe(list => {\n      this._list = list as NzSegmentedOptions;\n      this.detectChanges();\n    });\n  }\n\n  valueChange(index: string | number): void {\n    if (this.ui.valueChange) {\n      this.ui.valueChange({ index, item: typeof index === 'number' ? (this.list[index] as SFValue) : null });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { DelonFormModule, WidgetRegistry } from '@delon/form';\nimport { NzSegmentedModule } from 'ng-zorro-antd/segmented';\n\nimport { SegmentedWidget } from './widget';\n\n@NgModule({\n  imports: [FormsModule, DelonFormModule, NzSegmentedModule, SegmentedWidget]\n})\nexport class SegmentedWidgetModule {\n  constructor(widgetRegistry: WidgetRegistry) {\n    widgetRegistry.register(SegmentedWidget.KEY, SegmentedWidget);\n  }\n}\n","import type { SFWidgetProvideConfig } from '@delon/form';\n\nimport { SegmentedWidget } from './widget';\n\nexport * from './widget';\nexport * from './schema';\nexport * from './module';\n\nexport function withSegmentedWidget(): SFWidgetProvideConfig {\n  return { KEY: SegmentedWidget.KEY, type: SegmentedWidget };\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i2","i1"],"mappings":"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"}